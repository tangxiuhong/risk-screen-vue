<template>
  <div class="mod-home content-mod" :style="{height: styleHeight}" id="main">
    <el-row :gutter="8" style="height: 100%;">
      <!--左-->
      <el-col :span="8" style="height: 100%;">
        <!--左上-->
        <!--border线模块公用样式名称：modulGround-->
        <div class="modulGround">
          <!--盛放内容模块公共样式名称：moduleContent-->
          <div class="moduleContent left-up">
            <div class="tody">
              <el-row>
                <el-col :span="12"><span class="date" v-text="nowDate" style="padding-left: 20px;"></span></el-col>
                <el-col :span="12">
                  <el-row>
                    <el-col :span="10"><span class="cityName">鄂州市：</span></el-col>
                    <el-col :span="14">
                      <span class="weather">多云 <div class="weatherImg"><img src="../../../assets/img/home/u193.png"
                                                                            alt="天气图片"></div></span>
                    </el-col>
                  </el-row>
                </el-col>
              </el-row>
            </div>
            <div class="cityUnit">
              <div>
                <div class="modImgTxt">
                  <div class="modImg"><img src="../../../assets/img/home/u576.png" alt=""></div>
                  <div class="modTxt" style="color: #166BCE">全市单位</div>
                </div>
                <div class="modData" style="color: #166BCE" v-text="enterpriseCount"></div>
              </div>
              <div>
                <div class="modImgTxt">
                  <div class="modImg"><img src="../../../assets/img/home/u574.png" alt=""></div>
                  <div class="modTxt" style="color: #F73363;">单位注册</div>
                </div>
                <div class="modData" style="color: #F73363;" v-text="enterpriseRegistCount"></div>
              </div>
              <div>
                <div class="modImgTxt">
                  <div class="modImg"><img src="../../../assets/img/home/u554.png" alt=""></div>
                  <div class="modTxt" style="color: #1AFA29">监管行业</div>
                </div>
                <div class="modData" style="color: #1AFA29" v-text="industryCount"></div>
              </div>
              <div>
                <div class="modImgTxt">
                  <div class="modImg"><img src="../../../assets/img/home/u564.png" alt=""></div>
                  <div class="modTxt" style="color: #EED04F;">监管区域</div>
                </div>
                <div class="modData" style="color: #EED04F;" v-text="areaCount"></div>
              </div>
            </div>

          </div>
        </div>
        <!--左中-->
        <div class="modulGround moduleTop">
          <!--模块标题头样式：modulTitle-->
          <div class="modulTitle">
            <p>区域企业统计</p>
            <span></span>
          </div>
          <!--盛放内容模块公共样式名称：moduleContent-->
          <div class="moduleContent left-up">
            <div id="leftCenterBar" style="width: 100%; height: 95%;"></div>
          </div>
        </div>
        <!--左下-->
        <div class="modulGround moduleTop">
          <!--模块标题头样式：modulTitle-->
          <div class="modulTitle">
            <p>行业企业统计</p>
            <span></span>
          </div>
          <!--盛放内容模块公共样式名称：moduleContent-->
          <div class="moduleContent left-up">
            <div id="leftBottomPie" style="width: 100%; height:95%; margin-top:10px">
            </div>
          </div>
        </div>
      </el-col>
      <!--中-->
      <el-col :span="8" style="height: 100%;">
        <!--border线模块公用样式名称：modulGround-->
        <div class="modulGround" style="height:100%;">
          <!-- 放搜索下拉框 -->
          <div id="businessSelect" @click.stop>这是一个搜索框</div>
          <!--盛放内容模块公共样式名称：moduleContent-->
          <div class="moduleContent left-up" style="height:100%;">
            <!-- <p @click="enterpriseInfo = true" style="cursor:pointer;">企业信息</p>-->
            <figure id="MainMap" style="height:100%;"></figure>
          </div>
        </div>
      </el-col>
      <!--右-->
      <el-col :span="8" style="height: 100%;">
        <!--右上-->
        <div class="modulGround moduleTop">
          <div class="modulTitle">
            <p>预警信息统计</p>
            <span></span>
          </div>
          <div class="moduleContent right-up">
            <div class="cityUnit">
              <div>
                <div class="modImgTxt">
                  <div class="modImg"><img src="../../../assets/img/home/u109.png" alt=""></div>
                  <div class="modTxt" style="color: #d81e06;">风险变化预警</div>
                </div>
                <div class="modData" :class="{'riskSyle':animate1}" style="color: #d81e06; cursor: pointer;"
                     @click="riskChangeSms()">
                  <span v-text="riskEntCount" class="">0</span><span>家</span>
                </div>
              </div>
              <div>
                <div class="modImgTxt">
                  <div class="modImg"><img src="../../../assets/img/home/u107.png" alt=""></div>
                  <div class="modTxt" style="color: #ff9d4d;">实时监测预警</div>
                </div>
                <div class="modData" :class="{'riskSyle':animate2}" style="color: #ff9d4d; cursor: pointer;"
                     @click="realDataSms()">
                  <span v-text="realDataEntCount">0</span><span>家</span>
                </div>
              </div>
            </div>
          </div>
        </div>
        <!--右中-->
        <div class="modulGround moduleTop">
          <div class="modulTitle">
            <p>风险信息概览</p>
            <span></span>
          </div>
          <div class="moduleContent right-center">
            <div class="riskInfo">
              <p>辨识风险 <span style="color: #F73363;" v-text="identificationRiskCount"></span>条</p>
              <p>管控风险 <span style="color: #83D3D4;" v-text="controlRiskCount"></span>条</p>
            </div>
            <el-row>
              <el-col :span="10">
                <div id="RiskGauge" style="height: 150px;"></div>
              </el-col>
              <el-col :span="14">
                <div id="RiskBar" style="height: 150px"></div>
              </el-col>
            </el-row>
          </div>
        </div>
        <!--右下-->
        <div class="modulGround moduleTop">
          <div class="modulTitle">
            <p>隐患信息概览</p>
            <span></span>
          </div>
          <div class="moduleContent right-down">
            <div class="hiddenDangerInfo">
              <p>排查隐患 <span style="color: #F73363;" v-text="hiddenTroubleInvestigation"></span>条</p>
              <p>整改隐患 <span style="color: #83D3D4;" v-text="selectUpdHiddenTroubleCount"></span>条</p>
            </div>
            <el-row>
              <el-col :span="10">
                <div style="height: 150px;" id="HiddenGauge"></div>
              </el-col>
              <el-col :span="14">
                <div style="height: 150px;" id="HiddenBar"></div>
              </el-col>
            </el-row>
          </div>
        </div>
      </el-col>
    </el-row>
    <risk-change-sms v-if="riskChangeSmsVisible" ref="riskChangeSms"></risk-change-sms>
    <real-data-sms v-if="realDataSmsVisible" ref="realDataSms"></real-data-sms>
    <!--单企业风险动态分析-->
    <riskDynamicAnalysisSingle v-if="analysisSingleVisible" ref="analysisSingle"></riskDynamicAnalysisSingle>
  </div>
</template>
<script>
  import riskChangeSms from './home-riskChangeSms'
  import realDataSms from './home-realDataSms'
  import riskDynamicAnalysisSingle from '../riskCtrlInfo/riskDynamicAnalysis-single'
  import {getUUID} from '@/utils'
  import echarts from 'echarts'

  export default {
    data () {
      return {
        styleHeight: window.screen.availHeight - 108 + 'px',
        enterpriseInfo: false,
        nowDate: '',
        enterpriseCount: '',
        enterpriseRegistCount: '',
        identificationRiskCount: '',
        controlRiskCount: '',
        hiddenTroubleInvestigation: '',
        selectUpdHiddenTroubleCount: '',
        areaCount: '',
        riskEntCount: '',
        realDataEntCount: '',
        centerMapData: [],
        industryCount: '',
        leftCenterBar: null,
        leftBottomPie: null,
        centerMap: null,
        rightCenterBar: null,
        rightBottomBar: null,
        rightCenterGauge: null,
        rightBottomGauge: null,
        tv: '', // 用于存放定时器
        clickFlag: true,
        riskChangeSmsVisible: false,
        realDataSmsVisible: false,
        userId: '',
        webSocket: null,
        webSocket2: null,
        mapId: '',
        animate1: false,
        animate2: false,
        localStorages: '',
        analysisSingleVisible: false
      }
    },
    computed: {},
    components: {
      riskChangeSms,
      realDataSms,
      riskDynamicAnalysisSingle
    },
    mounted () {
      this.getNowDate()
      this.getLeftTopData()
      this.initLeftCenterBar()
      this.initLeftBottomPie()
      this.initRightCenter()
      this.initRightBottom()
      this.clickFn()
      this.initCenterMap()
    },
    activated () {
      // 由于给echart添加了resize事件, 在组件激活时需要重新resize绘画一次, 否则出现空白bug
      if (this.leftCenterBar) {
        this.leftCenterBar.resize()
      }
      if (this.leftBottomPie) {
        this.leftBottomPie.resize()
      }
      if (this.centerMap) {
        this.centerMap.resize()
      }
      if (this.rightCenterBar) {
        this.rightCenterBar.resize()
      }
      if (this.rightCenterGauge) {
        this.rightCenterGauge.resize()
      }
      if (this.rightBottomBar) {
        this.rightBottomBar.resize()
      }
      if (this.rightBottomGauge) {
        this.rightBottomGauge.resize()
      }
      if (this.centerMap) {
        this.centerMap.resize()
      }
    },
    created () {
      // 页面刚进入时开启长连接
      this.initWebSocket()
      this.initWebSocket2()
    },
    destroyed: function () {
      // 页面销毁时关闭长连接
      this.webSocketClose()
      this.webSocketClose2()
    },
    watch: {
      riskEntCount (val) {
        this.localStorages = localStorage.getItem('riskEntCount')  //获取存储值
        if (val != this.localStorages) {
          localStorage.setItem('riskEntCount', val)
          this.riskChange1()
        }
      },
      realDataEntCount (val) {
        this.localStorages = localStorage.getItem('realDataEntCount')  //获取存储值
        if (val != this.localStorages) {
          localStorage.setItem('realDataEntCount', val)
          this.riskChange2()
        }
      }
    },
    methods: {
      riskChange1 () {
        this.animate1 = true
        setTimeout(() => {
          this.animate1 = false
        }, 5000)
      },
      riskChange2 () {
        this.animate2 = true
        setTimeout(() => {
          this.animate2 = false
        }, 5000)
      },
      initWebSocket () {
        this.$http({
          url: this.$http.adornUrl('/sys/user/info'),
          method: 'get',
          params: this.$http.adornParams()
        }).then(({data}) => {
          if (data && data.code === 0) {
            this.userId = data.user.id
          }
        }).then(() => {
          // 初始化webSocket
          const userId = this.userId + '_' + getUUID()
          const wsUri = window.SITE_CONFIG.wsUrl + '/ws/dashboard/' + userId
          this.webSocket = new WebSocket(wsUri)
          this.webSocket.onopen = this.webSocketOnOpen
          this.webSocket.onerror = this.webSocketOnError
          this.webSocket.onmessage = this.webSocketOnMessage
          this.webSocket.onclose = this.webSocketClose
        })
      },
      webSocketOnOpen () {
        console.log('WebSocket连接成功')
      },
      webSocketOnError (e) {
        // 错误
        console.log('WebSocket连接发生错误')
      },
      webSocketOnMessage (e) {
        // 接受数据
        const redata = JSON.parse(e.data)
        console.log(redata)
        this.centerMapData = redata
        this.initCenterMap()
      },
      webSocketSend (agentData) {
        // 数据发送
        this.webSocket.send(agentData)
      },
      webSocketClose (e) {
        // 关闭
        console.log('connection closed')
      },

      initWebSocket2 () {
        // 初始化webSocket
        const userId = this.userId + '_' + getUUID()
        const wsUri = window.SITE_CONFIG.wsUrl + '/ws/dashboardAlarm/' + userId
        this.webSocket2 = new WebSocket(wsUri)
        this.webSocket2.onopen = this.webSocketOnOpen2
        this.webSocket2.onerror = this.webSocketOnError
        this.webSocket2.onmessage = this.webSocketOnMessage2
        this.webSocket2.onclose = this.webSocketClose2
      },
      webSocketOnOpen2 () {
        console.log('WebSocket连接成功')
      },
      webSocketOnMessage2 (e) {
        // 接收数据
        const redata = JSON.parse(e.data)
        // this.riskEntCount = redata.riskEntCount
        this.riskEntCount = 3
        this.realDataEntCount = redata.realDataEntCount
      },
      webSocketSend2 (agentData) {
        // 数据发送
        this.webSocket2.send(agentData)
      },
      webSocketClose2 (e) {
        // 关闭
        console.log('connection closed')
      },
      // 风险变化预警
      riskChangeSms () {
        this.riskChangeSmsVisible = true
        this.$nextTick(() => {
          this.$refs.riskChangeSms.init()
        })
      },
      // 实时监测预警
      realDataSms () {
        this.realDataSmsVisible = true
        this.$nextTick(() => {
          this.$refs.realDataSms.init()
        })
      },
      // 点击页面，隐藏下拉框
      clickFn () {
        var _this = this
        $('#main').on('click', function () {
          if (_this.clickFlag) {
            $('#businessSelect').css('display', 'none')
          }
          _this.clickFlag = true
        })
      },

      // 左边部分
      // 左上获取当年时间
      getNowDate () {
        // 获取系统当前时间
        var date = new Date()
        this.nowDate = date.getFullYear() + '年' + (date.getMonth() + 1) + '月' + date.getDate() + '日'
      },
      // 左上获取第一个框中的数据
      getLeftTopData () {
        this.$http({
          url: this.$http.adornUrl(`/dashboard/getEnterpriseCount`),
          method: 'get',
          params: this.$http.adornParams()
        }).then(({data}) => {
          if (data && data.code === 0) {
            this.enterpriseCount = data.enterpriseCount
            this.enterpriseRegistCount = data.enterpriseRegistCount
            this.areaCount = data.areaCount
            this.industryCount = data.industryCount
          }
        })
      },

      // 左中柱状图
      initLeftCenterBar () {
        var option = {
          color: ['#355261'],
          title: {
            text: '企业数',
            left: 'left',
            textStyle: {
              fontSize: 14,
              color: '#fff'
            }
          },
          tooltip: {
            trigger: 'axis',
            axisPointer: {            // 坐标轴指示器，坐标轴触发有效
              type: 'shadow'        // 默认为直线，可选为：'line' | 'shadow'
            }
          },
          grid: {
            left: '3%',
            right: '4%',
            bottom: '14%',
            top: '16%',
            containLabel: true
          },
          xAxis: [
            {
              type: 'category',
              data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
              axisTick: {
                alignWithLabel: true
              },
              axisLabel: {
                textStyle: {
                  color: '#fff'
                },
                interval: 0,
                rotate: 20
              }
            }
          ],
          yAxis: [
            {
              type: 'value',
              axisTick: {
                show: false
              },
              axisLine: {
                show: false
              },
              axisLabel: {
                textStyle: {
                  color: '#fff'
                }
              }
            }
          ],
          series: [
            {
              name: '企业数',
              type: 'bar',
              barWidth: '60%',
              data: [10, 52, 200, 334, 390, 330, 220]
            }
          ]
        }
        // 给左中柱状图赋值
        this.$http({
          url: this.$http.adornUrl(`/dashboard/getAreaEnterpriseCount`),
          method: 'get',
          params: this.$http.adornParams()
        }).then(({data}) => {
          if (data && data.code === 0) {
            var xdata = []
            var sdata = []
            for (var x in data.list) {
              xdata[x] = data.list[x].name
              sdata[x] = data.list[x].num
            }
            option.xAxis[0].data = xdata
            option.series[0].data = sdata
            this.leftCenterBar = echarts.init(document.getElementById('leftCenterBar'))
            this.leftCenterBar.setOption(option)
            window.addEventListener('resize', () => {
              this.leftCenterBar.resize()
            })
          }
        })
      },

      // 左下饼状图
      initLeftBottomPie () {
        var option = {
          color: ['#C23531', '#478142', '#6AB0B8',
            '#E88F6F', '#9DD7BC', '#89B89F', '#DE9325',
            '#C23531', '#478242', '#6AB0B8', '#E78E6E',
            '#9FDABF', '#91C6AC', '#DD9225', '#C13130',
            '#478242', '#6AB1B8', '#E98F6F', '#9FDABF', '#91C7AE'],
          tooltip: {
            trigger: 'item',
            formatter: '{b} : {c} ({d}%)'
          },
          calculable: true,
          series: [
            {
              type: 'pie',
              radius: [20, 60],
              center: ['50%', '50%'],
              roseType: 'radius',
              label: {
                normal: {
                  formatter: '{b}:\n{c}({d}%) ',
                  backgroundColor: '#eee',
                  borderColor: '#aaa',
                  borderWidth: 1
                }
              },
              data: []
            }
          ]
        }

        // 给左下饼状图赋值
        this.$http({
          url: this.$http.adornUrl(`/dashboard/getIndustryEnterpriseCount`),
          method: 'get',
          params: this.$http.adornParams()
        }).then(({data}) => {
          if (data && data.code === 0) {
            option.series[0].data = data.list
            // 给左边饼状图赋值(异常数，正常数)
            this.leftBottomPie = echarts.init(document.getElementById('leftBottomPie'))
            this.leftBottomPie.setOption(option)
            window.addEventListener('resize', () => {
              this.leftBottomPie.resize()
            })
          }
        })
      },
      // 右中部分初始化
      initRightCenter () {
        // 获取后台的数据
        this.$http({
          url: this.$http.adornUrl(`/dashboard/getRiskInfo`),
          method: 'get',
          params: this.$http.adornParams()
        }).then(({data}) => {
          if (data && data.code === 0) {
            // 给辨识风险和管控风险赋值
            this.identificationRiskCount = data.identificationRiskCount
            this.controlRiskCount = data.controlRiskCount
            // 给仪表盘赋值
            this.rightCenterGauge = echarts.init(document.getElementById('RiskGauge'))
            var riskGaugeOption = {
              grid: {
                top: '0%',
                left: '0%',
                right: '0%',
                bottom: '0%',
                padding: '0',
                containLabel: true
              },
              series: [
                {
                  name: '指标',
                  type: 'gauge',
                  center: ['50%', '50%'],
                  radius: '90%',
                  max: '100',
                  axisLine: {
                    lineStyle: {
                      color: [[0.25, '#FF0000'], [0.5, '#FF9900'], [0.75, '#FDFE02'], [1, '#0099FF']],
                      width: 8
                    }
                  },
                  pointer: {
                    width: 5,
                    length: '70%',
                    shadowColor: '#fff',
                    shadowBlur: 5
                  },
                  splitLine: {
                    show: true,        // 默认显示，属性show控制显示与否
                    length: 12,         // 属性length控制线长
                    lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
                      color: 'auto'
                    }
                  },
                  axisTick: {            // 坐标轴小标记
                    splitNumber: 5,   // 每份split细分多少段
                    length: 13,        // 属性length控制线长
                    lineStyle: {       // 属性lineStyle控制线条样式
                      color: 'auto'
                    }
                  },
                  axisLabel: {
                    textStyle: {
                      fontSize: 9
                    },
                    distance: 0
                  },
                  title: {
                    offsetCenter: [0, '95%'],       // x, y，单位px
                    textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
                      fontSize: 15,
                      color: '#86D9DE'
                    }
                  },
                  detail: {
                    show: true,
                    formatter: '{value}%',
                    offsetCenter: [0, '60%'],
                    textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
                      fontSize: 16
                    }
                  },
                  data: [
                    {
                      value: data.match,
                      name: '风险管控相符率'
                    }
                  ]
                }
              ]
            }
            this.rightCenterGauge.setOption(riskGaugeOption)
            window.addEventListener('resize', () => {
              this.rightCenterGauge.resize()
            })
            // 给柱状图赋值
            this.rightCenterBar = echarts.init(document.getElementById('RiskBar'))
            var riskBarOption = {
              grid: {
                top: '14%',
                left: '-10%',
                right: '2%',
                bottom: '0%',
                containLabel: true
              },
              tooltip: {
                trigger: 'axis',
                axisPointer: {
                  type: 'shadow'
                }
              },
              xAxis: [
                {
                  type: 'category',
                  axisLine: {
                    lineStyle: {
                      color: '#ffffff'
                    }
                  },
                  axisTick: {
                    lineStyle: {
                      color: '#ffffff'
                    }
                  },
                  axisLabel: {
                    interval: 0,
                    textStyle: {
                      fontSize: '16'
                    }
                  },
                  data: ['重大风险', '较大风险', '一般风险', '低风险']
                }
              ],
              yAxis: [
                {
                  show: false
                }
              ],
              series: [
                {
                  type: 'bar',
                  barCategoryGap: '50%',
                  itemStyle: {
                    normal: {
                      barBorderWidth: 0,
                      barBorderRadius: 4,
                      label: {
                        show: true,
                        position: 'top',
                        textStyle: {
                          fontSize: 14,
                          color: '#fff'
                        }
                      }
                    }
                  },
                  data: [
                    {
                      value: data.riskNum,
                      itemStyle: {
                        normal: {
                          color: '#FF0000'
                        }
                      }
                    },
                    {
                      value: data.orangeNum,
                      itemStyle: {
                        normal: {
                          color: '#FF9900'
                        }
                      }
                    }, {
                      value: data.yellowNum,
                      itemStyle: {
                        normal: {
                          color: '#FDFE02'
                        }
                      }
                    }, {
                      value: data.blueNum,
                      itemStyle: {
                        normal: {
                          color: '#009cff'
                        }
                      }
                    }
                  ]
                }
              ]
            }
            this.rightCenterBar.setOption(riskBarOption)
            window.addEventListener('resize', () => {
              this.rightCenterBar.resize()
            })
          }
        })
      },
      // 右下部分初始化
      initRightBottom () {
        // 给左下饼状图赋值
        this.$http({
          url: this.$http.adornUrl(`/dashboard/getTroubleInfo`),
          method: 'get',
          params: this.$http.adornParams()
        }).then(({data}) => {
          if (data && data.code === 0) {
            // 给排查隐患和整改隐患赋值
            this.hiddenTroubleInvestigation = data.hiddenTroubleInvestigation
            this.selectUpdHiddenTroubleCount = data.selectUpdHiddenTroubleCount
            // 给仪表盘赋值
            this.rightBottomGauge = echarts.init(document.getElementById('HiddenGauge'))
            var hiddenGaugeOption = {
              grid: {
                top: '0%',
                left: '0%',
                right: '0%',
                bottom: '0%',
                padding: '0',
                containLabel: true
              },
              series: [
                {
                  name: '指标',
                  type: 'gauge',
                  center: ['50%', '50%'],
                  radius: '90%',
                  max: '100',
                  axisLine: {
                    lineStyle: {
                      color: [[0.25, '#FF0000'], [0.5, '#FF9900'], [0.75, '#FDFE02'], [1, '#0099FF']],
                      width: 8
                    }
                  },
                  pointer: {
                    width: 5,
                    length: '70%',
                    shadowColor: '#fff',
                    shadowBlur: 5
                  },
                  splitLine: {
                    show: true,        // 默认显示，属性show控制显示与否
                    length: 12,         // 属性length控制线长
                    lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
                      color: 'auto'
                    }
                  },
                  axisTick: {            // 坐标轴小标记
                    splitNumber: 5,   // 每份split细分多少段
                    length: 13,        // 属性length控制线长
                    lineStyle: {       // 属性lineStyle控制线条样式
                      color: 'auto'
                    }
                  },
                  axisLabel: {
                    textStyle: {
                      fontSize: 9
                    },
                    distance: 0
                  },
                  title: {
                    offsetCenter: [0, '95%'],       // x, y，单位px
                    textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
                      fontSize: 15,
                      color: '#86D9DE'
                    }
                  },
                  detail: {
                    show: true,
                    formatter: '{value}%',
                    offsetCenter: [0, '60%'],
                    textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
                      fontSize: 16
                    }
                  },
                  data: [
                    {
                      value: data.match,
                      name: '隐患管控相符率'
                    }
                  ]
                }
              ]
            }
            this.rightBottomGauge.setOption(hiddenGaugeOption)
            window.addEventListener('resize', () => {
              this.rightBottomGauge.resize()
            })

            // 给柱状图赋值
            this.rightBottomBar = echarts.init(document.getElementById('HiddenBar'))
            var troubleBarOption = {
              grid: {
                top: '14%',
                left: '-10%',
                right: '2%',
                bottom: '0%',
                containLabel: true
              },
              tooltip: {
                trigger: 'axis',
                axisPointer: {
                  type: 'shadow'
                }
              },
              xAxis: [
                {
                  type: 'category',
                  axisLine: {
                    lineStyle: {
                      color: '#ffffff'
                    }
                  },
                  axisTick: {
                    lineStyle: {
                      color: '#ffffff'
                    }
                  },
                  axisLabel: {
                    interval: 0,
                    textStyle: {
                      fontSize: '16'
                    }
                  },
                  data: ['重大隐患', '一般隐患']
                }
              ],
              yAxis: [
                {
                  show: false
                }
              ],
              series: [
                {
                  type: 'bar',
                  barCategoryGap: '75%',
                  itemStyle: {
                    normal: {
                      barBorderWidth: 0,
                      barBorderRadius: 4,
                      label: {
                        show: true,
                        position: 'top',
                        textStyle: {
                          fontSize: 14,
                          color: '#fff'
                        }
                      }
                    }
                  },
                  data: [
                    {
                      value: data.highTroubleNum,
                      itemStyle: {
                        normal: {
                          color: '#FF0000'
                        }
                      }
                    },
                    {
                      value: data.troubleNum,
                      itemStyle: {
                        normal: {
                          color: '#FDFE02'
                        }
                      }
                    }
                  ]
                }
              ]
            }
            this.rightBottomBar.setOption(troubleBarOption)
            window.addEventListener('resize', () => {
              this.rightBottomBar.resize()
            })
          }
        })
      },
      // 中间地图部分
      initCenterMap () {
        var _this2 = this
        var data = this.centerMapData
        $.getJSON('/static/plugins/echarts-3.8.5/ezhou_Q.json', function (geoJson) {
          echarts.registerMap('ezhou', geoJson)
          var _this = this
          var option = {
            /*  backgroundColor: '#43516C',*/
            tooltip: {
              trigger: 'item',
              backgroundColor: 'rgba(107,107,107,0.8)',
              borderColor: '#FFFFCC',
              showDelay: 0,
              hideDelay: 0,
              enterable: true,
              transitionDuration: 0,
              extraCssText: 'z-index:100',
              formatter: function (params, ticket, callback) {
                var res = ''
                var name = params.name
                var value = params.value
                res = '<span style=\'color:#fff;\'>企业名称：' + name + '</span><br/>'
                res += '<span>行业类型：' + value[2] + '</span><br/>'
                res += '<span>风险等级：' + value[3] + '</span><br/>'
                res += '<span>重大危险源：' + value[4] + '个</span><br/>'
                res += '<span>监测预警：' + value[5] + '条</span><br/>'
                return res
              }
            },
            legend: {
              orient: 'vertical',
              y: 'top',
              x: 'right',
              data: ['重大风险', '较大风险', '一般风险', '低风险'],
              textStyle: {
                color: '#fff'
              },
              align: 'left'
            },
            toolbox: {
              show: true,
              orient: 'horizontal',
              left: 'center',
              top: 'top',
              feature: {
                dataView: {readOnly: false},
                restore: {},
                saveAsImage: {}
                /*myTool1: {
                  show: true,
                  title: '搜索行业',
                  icon: 'path://M432.45,595.444c0,2.177-4.661,6.82-11.305,6.82c-6.475,0-11.306-4.567-11.306-6.82s4.852-6.812,11.306-6.812C427.841,588.632,432.452,593.191,432.45,595.444L432.45,595.444z M421.155,589.876c-3.009,0-5.448,2.495-5.448,5.572s2.439,5.572,5.448,5.572c3.01,0,5.449-2.495,5.449-5.572C426.604,592.371,424.165,589.876,421.155,589.876L421.155,589.876z M421.146,591.891c-1.916,0-3.47,1.589-3.47,3.549c0,1.959,1.554,3.548,3.47,3.548s3.469-1.589,3.469-3.548C424.614,593.479,423.062,591.891,421.146,591.891L421.146,591.891zM421.146,591.891',
                  onclick: function () {
                    _this.clickFlag = false
                    $('#businessSelect').css('display', 'block')
                  }

                }*/
              }
            },
            geo: {
              map: 'ezhou',
              zoom: 1.43,
              center: [114.790490, 30.318580],
              label: {
                normal: {
                  show: true,
                  textStyle: {color: '#000'}
                },
                emphasis: {
                  show: true,
                  textStyle: {color: '#000'}
                }
              },
              roam: true, // 是否允许缩放
              layoutCenter: ['50%', '50%'], // 地图位置
              layoutSize: '95%',
              itemStyle: {
                normal: {
                  color: 'rgba(51, 69, 89, .5)', // 地图背景色
                  borderColor: 'rgba(100,149,237,1)' // 省市边界线
                },
                emphasis: {
                  color: 'rgba(37, 43, 61, .5)' // 悬浮背景
                }
              }
            },
            series: [{
              name: '重大风险',
              type: 'effectScatter',
              coordinateSystem: 'geo',
              data: [],
              symbolSize: function (val) {
                return 18
              },
              showEffectOn: 'render',
              rippleEffect: {
                brushType: 'stroke'
              },
              hoverAnimation: true,
              label: {
                normal: {
                  formatter: '{b}',
                  position: 'right',
                  show: false
                }
              },
              itemStyle: {
                normal: {
                  color: '#FF0000',
                  shadowBlur: 1,
                  shadowColor: '#FF0000'
                }
              },
              zlevel: 1
            }, {
              name: '较大风险',
              type: 'effectScatter',
              coordinateSystem: 'geo',
              data: [],
              symbolSize: function (val) {
                return 12
              },
              showEffectOn: 'render',
              rippleEffect: {
                brushType: 'stroke'
              },
              hoverAnimation: true,
              label: {
                normal: {
                  formatter: '{b}',
                  position: 'right',
                  show: false
                }
              },
              itemStyle: {
                normal: {
                  color: '#FF9900',
                  shadowBlur: 1,
                  shadowColor: '#FF9900'
                }
              },
              zlevel: 1
            }, {
              name: '一般风险',
              type: 'effectScatter',
              coordinateSystem: 'geo',
              data: [],
              symbolSize: function (val) {
                return 8
              },
              showEffectOn: 'render',
              rippleEffect: {
                brushType: 'stroke'
              },
              hoverAnimation: true,
              label: {
                normal: {
                  formatter: '{b}',
                  position: 'right',
                  show: false
                }
              },
              itemStyle: {
                normal: {
                  color: '#E0E30E',
                  shadowBlur: 1,
                  shadowColor: '#E0E30E'
                }
              },
              zlevel: 1
            }, {
              name: '低风险',
              type: 'effectScatter',
              coordinateSystem: 'geo',
              data: [],
              symbolSize: function (val) {
                return 6
              },

              showEffectOn: 'render',
              rippleEffect: {
                brushType: 'stroke'
              },
              hoverAnimation: true,
              label: {
                normal: {
                  formatter: '{b}',
                  position: 'right',
                  show: false
                }
              },
              itemStyle: {
                normal: {
                  color: '#009CFF',
                  shadowBlur: 1,
                  shadowColor: '#009CFF'
                }
              },
              zlevel: 1
            }
            ]
          }
          this.centerMap = echarts.init(document.getElementById('MainMap'))
          var redContent = []
          var orangeContent = []
          var yellowContent = []
          var blueContent = []
          for (var x in data) {
            var a = {
              name: data[x].name,
              value: [data[x].mapX, data[x].mapY, data[x].businessType, data[x].riskLevelName, data[x].majorHazardInfoNum, data[x].warnNum, data[x].unitId]
            }
            if (data[x].riskLevel == 1 || data[x].riskLevel == 0) {
              redContent.push(a)
            } else if (data[x].riskLevel == 2) {
              orangeContent.push(a)
            } else if (data[x].riskLevel == 3) {
              yellowContent.push(a)
            } else {
              blueContent.push(a)
            }
          }
          option.series[0].data = redContent
          option.series[1].data = orangeContent
          option.series[2].data = yellowContent
          option.series[3].data = blueContent
          this.centerMap.setOption(option)
          // 获取所有闪动圆环数量
          var counts = option.series[1].data.length + option.series[0].data.length
          this.centerMap.on('click', function (params) {
            _this2.mapId = params.value[6]
            _this2.analysisSingleVisible = true
            _this2.$nextTick(() => {
              _this2.$refs.analysisSingle.initWebSocket(_this2.mapId)
            })
            // _this2.$router.push({
            //   name: 'riskDynamicAnalysis-single',
            //   params: {
            //     dataobj: _this2.mapId
            //   }
            // })
          })
          var dataIndex = 0
          // 让圆环的提示框自动触发轮播显示
          var t = 0

          function autoHoverTip () {
            for (var i = 0; i < counts; i++) {
              if (i < option.series[0].data.length) {
                (function (i) {
                  var ts = setTimeout(function () {
                    _this.centerMap.dispatchAction({
                      type: 'showTip',
                      seriesIndex: 0,
                      dataIndex: i
                    })
                  }, 5000 * i)
                })(i)
              } else {
                t = i - option.series[0].data.length;
                (function (t) {
                  var ts = setTimeout(function () {
                    _this.centerMap.dispatchAction({
                      type: 'showTip',
                      seriesIndex: 1,
                      dataIndex: t
                    })
                  }, 5000 * i)
                })(i)
              }
            }
          }

          setTimeout(function () {
            autoHoverTip()
            this.tv = setInterval(autoHoverTip, counts * 5000)
          }, 500)
          window.addEventListener('resize', () => {
            _this.centerMap.resize()
          })
        })
      }
    }
  }
</script>

<style lang="scss">

  #businessSelect {
    position: absolute;
    width: 200px;
    left: 36%;
    margin-top: -390px;
    border: 1px solid red;
    z-index: 9999;
    display: block;
  }

  .mod-home {
    & .modulGround {
      height: 32.5%;
    }
    & .left-up {
      height: 100%;
      & .tody {
        height: 20%;
        font-size: 14px;
        line-height: 5em;
        & .date {
          font-weight: bold;
          color: #2B93D5;
        }
        & .weatherImg {
          width: 20px;
          display: inline-block;
          & img {
            width: 100%;
          }
        }
      }
      & .cityUnit{
        height: 80%;
      }
    }
    & #MainMap {
      margin: 0px;
    }
    & .left-up,
    & .right-up {
      & .cityUnit {
        display: flex;
        margin-top: 10%;
        > div {
          flex: 1;
        }
      }
      & .modImgTxt {
        text-align: center;
        & .modImg {
          height: 50px;
          width: 100%;
          & img {
            width: 50px;
          }
        }
        & .modTxt {
          line-height: 2em;
          font-size: 16px;
        }
      }
      & .modTxt {
        line-height: 2em;
      }
      & .modData {
        font-size: 20px;
        font-weight: bold;
        line-height: 2em;
        text-align: center;
      }
    }

    & .right-center,
    & .right-down {
      & .riskInfo,
      & .hiddenDangerInfo {
        display: flex;
        text-align: center;
        & p {
          flex: 1;
          font-size: 16px;
          color: #fff;
          & span {
            font-size: 20px;
            font-weight: bold;
          }
        }
      }
    }
  }

  .riskSyle {
    animation: fade 700ms infinite;
    -webkit-animation: fade 700ms infinite;
  }

  @keyframes fade {
    from {
      opacity: 1.0;
    }
    50% {
      opacity: 0.4;
    }
    to {
      opacity: 1.0;
    }
  }

  @-webkit-keyframes fade {
    from {
      opacity: 1.0;
    }
    50% {
      opacity: 0.4;
    }
    to {
      opacity: 1.0;
    }
  }
</style>

