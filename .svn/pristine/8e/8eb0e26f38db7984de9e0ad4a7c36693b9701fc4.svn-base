/**
 * 全站路由配置
 *
 * 建议:
 * 1. 代码中路由统一使用name属性跳转(不使用path属性)
 */
import Vue from 'vue'
import Router from 'vue-router'
import http from '@/utils/httpRequest'
import { clearLoginInfo } from '@/utils'

Vue.use(Router)

// 开发环境不使用懒加载, 因为懒加载页面太多的话会造成webpack热更新太慢, 所以只有生产环境使用懒加载
const _import = require('./import-' + process.env.NODE_ENV)

// 全局路由(无需嵌套上左右整体布局)
const globalRoutes = [
  { path: '/404', component: _import('common/404'), name: '404', meta: { title: '404未找到' } },
  { path: '/login', component: _import('common/login'), name: 'login', meta: { title: '登录' } }
]

// 主入口路由(需嵌套上左右整体布局)
const mainRoutes = {
  path: '/',
  component: _import('main'),
  name: 'main',
  redirect: { name: 'home' },
  meta: { title: '主入口整体布局' },
  children: [
    // 通过meta对象设置路由展示方式
    // 1. isTab: 是否通过tab展示内容, true: 是, false: 否
    // 2. iframeUrl: 是否通过iframe嵌套展示内容, '以http[s]://开头': 是, '': 否
    // 提示: 如需要通过iframe嵌套展示内容, 但不通过tab打开, 请自行创建组件使用iframe处理!
    { path: '/home', component: _import('modules/home/home'), name: 'home', meta: { title: '首页' } },
    { path: '/riskCtrlInfo', component: _import('modules/riskCtrlInfo/riskCtrlInfo'), name: 'riskCtrlInfo', meta: { title: '风险管控' } },
    { path: '/riskDynamicAnalysis', component: _import('modules/riskCtrlInfo/riskDynamicAnalysis'), name: 'riskDynamicAnalysis', meta: { title: '风险分析' } },
    { path: '/riskDynamicAnalysis-single', component: _import('modules/riskCtrlInfo/riskDynamicAnalysis-single'), name: 'riskDynamicAnalysis-single', meta: { title: '风险分析' } },
    { path: '/hiddRiskMana', component: _import('modules/hiddRiskMana/hiddRiskMana'), name: 'hiddRiskMana', meta: { title: '隐患治理' } },
    { path: '/moniWarn', component: _import('modules/moniWarn/moniWarn'), name: 'moniWarn', meta: { title: '监测预警' } },
    { path: '/visuInte', component: _import('modules/moniWarn/visuInte'), name: 'visuInte', meta: { title: '视觉智能' } },
    { path: '/commDisp', component: _import('modules/commDisp/commDisp'), name: 'commDisp', meta: { title: '指挥调度' } },
    { path: '/perfEval', component: _import('modules/perfEval/perfEval'), name: 'perfEval', meta: { title: '绩效评估' } },
    { path: '/perfEval-region', component: _import('modules/perfEval/perfEval-region'), name: 'perfEval-region', meta: { title: '区域绩效' } },
    { path: '/perfEval-industry', component: _import('modules/perfEval/perfEval-industry'), name: 'perfEval-industry', meta: { title: '行业绩效' } },
    { path: '/perfEval-enterprise', component: _import('modules/perfEval/perfEval-enterprise'), name: 'perfEval-enterprise', meta: { title: '企业绩效' } },
    { path: '/emerManage', component: _import('modules/emerManage/emerManage'), name: 'emerManage', meta: { title: '应急管理' } },
    { path: '/emerManage-resources', component: _import('modules/emerManage/emerManage-resources'), name: 'emerManage-resources', meta: { title: '应急资源' } },
    { path: '/emerManage-plans', component: _import('modules/emerManage/emerManage-plans'), name: 'emerManage-plans', meta: { title: '应急预案' } }
  ],
  beforeEnter (to, from, next) {
    let token = Vue.cookie.get('token')
    if (!token || !/\S/.test(token)) {
      clearLoginInfo()
      next({ name: 'login' })
    }
    next()
  }
}

const router = new Router({
  mode: 'hash',
  scrollBehavior: () => ({ y: 0 }),
  isAddDynamicMenuRoutes: false, // 是否已经添加动态(菜单)路由
  routes: globalRoutes.concat(mainRoutes)
})

router.beforeEach((to, from, next) => {
  // 添加动态(菜单)路由
  // 1. 已经添加 or 全局路由, 直接访问
  // 2. 获取菜单列表, 添加并保存本地存储
  if (router.options.isAddDynamicMenuRoutes || fnCurrentRouteType(to, globalRoutes) === 'global') {
    next()
  } else {
    http({
      url: http.adornUrl('/sys/menu/nav'),
      method: 'get',
      params: http.adornParams()
    }).then(({data}) => {
      if (data && data.code === 0) {
        router.options.isAddDynamicMenuRoutes = true
        sessionStorage.setItem('permissions', JSON.stringify(data.permissions || '[]'))
        next({ ...to, replace: true })
      } else {
        sessionStorage.setItem('permissions', '[]')
        next()
      }
    }).catch((e) => {
      console.log(`%c${e} 请求菜单列表和权限失败，跳转至登录页！！`, 'color:blue')
      router.push({ name: 'login' })
    })
  }
})

/**
 * 判断当前路由类型, global: 全局路由, main: 主入口路由
 * @param {*} route 当前路由
 */
function fnCurrentRouteType (route, globalRoutes = []) {
  var temp = []
  for (var i = 0; i < globalRoutes.length; i++) {
    if (route.path === globalRoutes[i].path) {
      return 'global'
    } else if (globalRoutes[i].children && globalRoutes[i].children.length >= 1) {
      temp = temp.concat(globalRoutes[i].children)
    }
  }
  return temp.length >= 1 ? fnCurrentRouteType(route, temp) : 'main'
}
export default router
